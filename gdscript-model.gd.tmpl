@warning_ignore_start("incompatible_ternary")
extends RefCounted
{{- if comment }}
# {comment}

{{ endif -}}
# Generated by typescript-to-gdscript. Do not edit by hand!
# You can extend this in another class to override behaviors
{{ for import in imports }}
const {import.name} = preload("{{ if import.gd_impl }}.{{ endif }}./{import.src}"){{ if @last }}
{{ endif }}{{ endfor -}}
{{ for enum in enums }}{{ if enum.have_string_members }}
const {enum.name} = \{
	{{ for m in enum.members }}{m.name} = {m.value}{{ if not @last }},
	{{ endif }}{{endfor}}
}
{{ else }}
enum {enum.name} \{
	{{ for m in enum.members }}{m.name} = {m.value}{{ if not @last }},
	{{ endif }}{{ endfor }}
}
{{endif}}{{ endfor }}
{state_vars}
var __partial_deep := {{ if partial_deep }}true{{ else }}false{{ endif }}

{{ for var_decl in var_descriptors -}}
{{ if var_decl.comment -}}
# {var_decl.comment}
{{ endif -}}
var {var_decl.name}{{ if var_decl.decl_type }}: {var_decl.decl_type}{{ endif -}}
	{{- if var_decl.decl_init }} = {var_decl.decl_init}
	{{- endif -}}
	{{- if var_decl.optional }}: set = __set_{var_decl.name}{{ endif }}
{{ endfor }}
func _init(src: { src_type.name } {{ if src_type.init }}= {src_type.init}{{ endif }}, partial_deep = false) -> void:
	__partial_deep = __partial_deep || partial_deep
	if src:
		update(src)
{{ for var_decl in var_descriptors }}{{ if var_decl.optional }}
func __set_{var_decl.name}(__value__{{ if var_decl.decl_type }}: {var_decl.decl_type}{{ endif }}):
	__assigned_properties.{var_decl.name} = true if __value__ != null else null
	{var_decl.name} = __value__
{{ endif }}{{ endfor }}

func update(src: { src_type.name }) -> void:
	# custom import logic can be added by overriding this function
	__initialized = true
{{ for var in vars -}}
{ var.init }
{{ endfor }}

func for_json() -> Dictionary:
	# custom logic to serialize to dict/array/primitive for json
	var result = \{}
	if !__initialized:
		return result
{{ for var in vars -}}
{ var.for_json }
{{ endfor }}
	return result

{state_methods}
